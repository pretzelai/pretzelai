# Copyright (c) Jupyter Development Team.
# Distributed under the terms of the Modified BSD License.

[build-system]
requires = ["hatchling>=1.21.1"]
build-backend = "hatchling.build"

[project]
name = "pretzelai"
description = "Pretzel is a fork of JupyterLab that improves the user experience of the JupyterLab computational environment."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
authors = [{ name = "Pretzel AI GmbH", email = "founders@pretzel.ai" }]
keywords = ["ipython", "jupyter"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Jupyter",
    "Framework :: Jupyter :: JupyterLab",
    "Framework :: Jupyter :: JupyterLab :: 4",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "async_lru>=1.0.0",
    "httpx>=0.25.0",
    "importlib-metadata>=4.8.3;python_version<\"3.10\"",
    "importlib-resources>=1.4;python_version<\"3.9\"",
    "ipykernel>=6.5.0",
    "jinja2>=3.0.3",
    "jupyter_core",
    "jupyter_server>=2.4.0,<3",
    "jupyter-lsp>=2.0.0",
    "jupyterlab_server>=2.27.1,<3",
    "notebook_shim>=0.2",
    "packaging",
    "tomli>=1.2.2;python_version<\"3.11\"",
    "tornado>=6.2.0",
    "traitlets",
]
dynamic = ["version"]

[project.scripts]
jlpm = "pretzelai.jlpmapp:main"
pretzel = "pretzelai.cli:main"
pretzel-lab = "pretzelai.labapp:main"                 # Changed from jupyter-lab to pretzel-lab
jupyter-lab = "pretzelai.labapp:main"
jupyter-labextension = "pretzelai.labextensions:main"
jupyter-labhub = "pretzelai.labhubapp:main"

[project.entry-points."pretzelai.extension_manager_v1"]
readonly = "pretzelai.extensions:get_readonly_manager"
pypi = "pretzelai.extensions:get_pypi_manager"

[project.urls]
Homepage = "https://withpretzel.com"
Changelog = "https://withpretzel.com/changelog"
Documentation = "https://withpretzel.com/docs"
Source = "https://github.com/pretzelai/pretzelai"
Issues = "https://github.com/pretzelai/pretzelai/issues/new/choose"
Pypi = "https://pypi.org/project/pretzelai"

[project.optional-dependencies]
docs = [
    "sphinx>=1.8,<7.3.0",
    "sphinx-copybutton",
    "pydata-sphinx-theme>=0.13.0",
    "pytest",
    "pytest-jupyter",
    "pytest-check-links",
    "jsx-lexer",
    "myst-parser",
]
docs-screenshots = [
    "altair==5.3.0",
    "ipython==8.16.1",
    "ipywidgets==8.1.2",
    "jupyterlab-geojson==3.4.0",
    "jupyterlab-language-pack-zh-CN==4.1.post2",
    "matplotlib==3.8.3",
    "nbconvert>=7.0.0",
    "pandas==2.2.1",
    "scipy==1.12.0",
    "vega_datasets==0.9.0",
]
test = [
    "coverage",
    "pytest>=7.0",
    "pytest-check-links>=0.7",
    "pytest-console-scripts",
    "pytest-cov",
    "pytest-jupyter>=0.5.3",
    "pytest-timeout",
    "pytest-tornasync",
    "requests",
    "requests_cache",
    "virtualenv",
]
# Check ruff version is aligned with the one in .pre-commit-config.yaml
dev = [
    "build",
    "pre-commit",
    "pytest-cov",
    "coverage",
    "hatch",
    "bump2version",
    "ruff==0.3.5",
]
upgrade-extension = [
    "pyyaml-include<2.0",
    "copier>=8,<10",
    "jinja2-time<0.3",
    "pydantic<2.0",
    "tomli-w<2.0",
]

[tool.check-wheel-contents]
ignore = ["W002", "W004"]

[tool.hatch.version]
path = "pretzelai/_version.py"
source = "code"

[tool.hatch.build.targets.wheel.shared-data]
"pretzelai/static" = "share/jupyter/lab/static"
"pretzelai/schemas" = "share/jupyter/lab/schemas"
"pretzelai/themes" = "share/jupyter/lab/themes"
"jupyter-config" = "etc/jupyter"
"pretzelai.svg" = "share/icons/hicolor/scalable/apps/pretzelai.svg"
"pretzelai.desktop" = "share/applications/pretzelai.desktop"

[tool.hatch.build]
ignore-vcs = true

[tool.hatch.build.targets.sdist]
include = [
    "/*.md",
    "/buildapi.py",
    "/conftest.py",
    "/docs",
    "/docker",
    "/Dockerfile",
    "/.dockerignore",
    "/galata",
    "/jupyter-config",
    "/pretzelai",
    "/package.json",
    "pretzelai.svg",
    "pretzelai.desktop",
]
exclude = [
    "/.github",
    "*.js.map",
    "node_modules",
    "/clean.py",
    "/binder",
    "/builder",
    "/buildutils",
    "/dist",
    "/docs/build",
    "/docs/source/api",
    "/design",
    "/dev_mode",
    "/examples",
    "/galata/lib",
    "/pretzelai/staging/build",
    "/pretzelai/staging/.yarn",
    "/packages",
    "/release",
    "/testutils",
]

[tool.hatch.build.targets.wheel]
include = ["/pretzelai"]
exclude = [
    "*.js.map",
    "/pretzelai/staging/build",
    "/pretzelai/staging/.yarn",
    "node_modules",
]

[tool.hatch.build.hooks.jupyter-builder]
dependencies = ["hatch-jupyter-builder>=0.3.2"]
build-function = "buildapi.builder"
ensured-targets = [
    "pretzelai/static/package.json",
    "pretzelai/schemas/@jupyterlab/shortcuts-extension/shortcuts.json",
    "pretzelai/themes/@jupyterlab/theme-light-extension/index.css",
]
install-pre-commit-hook = true

[tool.hatch.build.hooks.jupyter-builder.editable-build-kwargs]
build_cmd = "build"
source_dir = "packages"
build_dir = "dev_mode/static"
npm = ["node", "pretzelai/staging/yarn.js"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
build_cmd = "build:prod:minimize"
path = "pretzelai/staging"
source_dir = "pretzelai/staging"
build_dir = "pretzelai/static"
npm = ["node", "yarn.js"]

[tool.pytest.ini_options]
testpaths = "pretzelai/tests"
norecursedirs = "node_modules .git _build .ipynb_checkpoints"
addopts = "--pdbcls=IPython.terminal.debugger:Pdb -v --junitxml=junit.xml"
ignore = "tests examples"

[tool.jupyter-releaser.options]
version-cmd = "jlpm bumpversion --force --skip-commit"
npm-install-options = "--legacy-peer-deps"
release-message = "[ci skip] Publish {version}"
tag-message = "[ci skip] Release {tag_name}"

[tool.jupyter-releaser.hooks]
before-bump-version = ["pip install -e .[dev]", "git checkout ."]
before-build-npm = ["jlpm", "jlpm run build:all"]
before-build-python = [
    "node buildutils/lib/local-repository start",
    "jlpm run before:build:python",
    "node buildutils/lib/local-repository stop",
]
after-publish-assets = "npm run after:publish:assets"

[tool.ruff]
target-version = "py38"
line-length = 100
lint.select = [
    "A",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "SIM",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
lint.ignore = [
    # Q000 Single quotes found but double quotes preferred
    "Q000",
    # FBT001 Boolean positional arg in function definition
    "FBT001",
    "FBT002",
    "FBT003",
    # E501 Line too long (158 > 100 characters)
    "E501",
    # PLR0913 Too many arguments to function call
    "PLR0913",
    # SIM105 Use `contextlib.suppress(...)`
    "SIM105",
]

[tool.ruff.lint.per-file-ignores]
# F821 Undefined name `c`
"binder/jupyter_config.py" = ["F821"]
# RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
"examples/example_check.py" = ["RUF012"]
# RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
"examples/federated/main.py" = ["RUF012"]
# T201 `print` found
"examples/test_examples.py" = ["T201"]
# T201 `print` found
"galata/*" = ["T201"]
# F821 Undefined name `c`
# S104 Possible binding to all interfaces
# S105 Possible hardcoded password: `""`
"galata/jupyter_server_test_config.py" = ["F821", "S104", "S105"]
# T201 `print` found
"pretzelai/browser_check.py" = ["RUF012", "T201"]
# C901 method is too complex
"pretzelai/commands.py" = ["C901"]
# B028 No explicit `stacklevel` keyword argument found
"pretzelai/debuglog.py" = ["B028"]
"pretzelai/extensions/manager.py" = ["C901"]
# RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
# T201 `print` found
"pretzelai/labapp.py" = ["RUF012", "T201"]
# RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
"pretzelai/labextensions.py" = ["RUF012"]
# C901 method is too complex
# S101 Use of `assert` detected
# N802 Function name `foo` should be lowercase
# EM101 Exception must not use a string literal
# PLR2004 Magic value used in comparison
"pretzelai/tests/*" = [
    "C901",
    "S101",
    "N802",
    "E501",
    "EM101",
    "EM102",
    "EM103",
    "PLR2004",
]
# RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
"pretzelai/tests/echo_kernel.py" = ["RUF012"]
# T201 `print` found
"scripts/milestone_check.py" = ["T201"]
# N806 Variable `tM` in function should be lowercase
# N816 Variable `comparatorTrimReplace` in global scope should not be mixedCase
# PLC1901 test can be simplified as an empty string is falsey
# PLR1714 Consider merging multiple comparisons
# PLR5501 Use `elif` instead of `else` then `if`, to reduce indentation
"pretzelai/semver.py" = [
    "C901",
    "EM101",
    "EM102",
    "N806",
    "N816",
    "PLC1901",
    "PLR1714",
    "PLR5501",
]
# T201 `print` found
"pretzelai/upgrade_extension.py" = ["T201"]
# RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
"packages/services/examples/node/main.py" = ["RUF012"]
# T201 `print` found
"scripts/i18n_check.py" = ["T201"]
